length		Returns the list length\n int length( llst )

pointdump	Returns the points of a layout object - the point list can be used for generation of further layout objects. \n point list pointdump(layout lobject)
typeof		--------------------
abs		Returns the absolute value \\n of the argument.\n real abs ( real X )
sin		Returns the sine of the argument X where X is given in degrees \n real sin ( real X ) 
cos		Returns the cosine of the argument X where X is given in degrees \n real cos ( real X ) 
tan		Returns the tangent of the argument X where X is given in degrees \n real tan ( real X ) 
asin		Returns the inverse sine; that is the value whose sine is Y. Result is in degrees \n real asin ( real Y ) 
acos		Returns the inverse cosine; that is the value whose cosine is Y. Result is in degrees \n real acos ( real Y ) 
atan		Returns the inverse tangent; that is the value whose tangent is Y. Result is in degrees \n real atan ( real Y ) 
sinh		Return the hyperbolic sine of X \n real sinh ( real X ) 
cosh		Return the hyperbolic cosine of X \n real cosh ( real X ) 
tanh		Return the hyperbolic tangent of X \n real tanh ( real X ) 
asinh		Return the inverse hyperbolic sine; that is the value whose hyperbolic cosine is Y. \n real asinh( real Y )
acosh		Return the inverse hyperbolic cosine; that is the value whose hyperbolic cosine is Y. \n real acosh( real Y ) 
atanh		Return the inverse hyperbolic tangent; that is the value whose hyperbolic tangent is Y. \n real atanh( real Y ) 
round		Returns the nearest integer to the argument.  \n int round ( real X ) 
ceil		Returns the smallest integer not less than the argument. \n int ceil ( real X ) 
floor		Returns the largest integer not greater than the argument. \n int floor ( real X )
fmod		Returns the floating-point remainder of dividing X by Y. \n real fmod ( real X, real Y ) 
sqrt		Returns the non-negative square root of the argument. \n real sqrt ( real X ) 
pow		Returns the value of X raised to the power of Y.  \n real pow ( real X, real Y )
exp		Returns the value of e (the base of natural logarithms) raised to the power of X.  \n real exp ( real X ) 
log		Returns the natural logarithm of X.  \n real log ( real X ) 
log10		Returns the base 10 logarithm of X.  \n real log10 ( real X ) 
getlaytype	Returns the type of the layout object. \n int getlaytype( layout lobject )
getlaytext	Returns the string contents of a text object. \nIf the input is a non-text object the function flags a runtime error. \n string getlaytext(layout tobject )
getlayref	Returns the name of the referenced cell. \nIf the input is not a reference object the function flags a runtime error. \n string getlayref( layout robject )

echo		Prints the value of a TELL variable \n void echo( variable )
printf		Write formatted data to the Tell log \n void printf( format [,param [,param [,...]]] )
sprintf		Write formatted data to a string. \n string sprintf( format [,param [,param [,…]]] )
status		--------------------
undo		--------------------

report_selected		Prints the list of currently selected objects. \n void report_selected()
report_layers		Prints the list of the used layers. \n layout report_layers(string cell_name,bool recursive ) \n layout report_layers(bool recursive )
report_gdslayers	Prints the list of used layers in a GDS structure. \n layout report_gdslayers(string struct_name )
report_ciflayers	Prints the list of used layers in a CIF structure. \n layout report_ciflayers(string struct_name )
report_oasislayers	Prints the list of used layers in an OASIS structure. \n layout report_oasislayers(string struct_name )

newdesign	Create a new empty design. \n void newdesign (string design_name) \n void newdesign (string design_name, string time_created) \n void newdesign (string design_name, real DBU, real UU) \n void newdesign (string design_name, real DBU, real UU, string time_created)
newcell		Create a new empty cell and add it to the database. \n void newcell (string cell_name)
removecell	Delete existing cell structure. \n void removecell (string cell_name)
renamecell	Rename existing cell structure. \n void renamecell (string old_name, string new_name)
cifread		Parse a CIF file. \n string list cifread(string file_name)
cifimport	Convert CIF structure to TDT cell. \n void cifimport (string list top_structures, lmap list layer_map, bool recursive, bool overwrite) \n void cifimport (string top_structure, lmap list layer_map , bool recursive, bool overwrite)
cifexport	Convert TDT database to CIF. \n void cifexport (lmap list layer_map, string filename_name, bool verbose_slang) \n void cifexport (string cell_name, bool recursive, lmap list layer_map, string filename_name, bool verbose_slang)
cifclose	Clean-up the memory from the CIF data. \n void cifclose ()
setciflaymap	Stores a TDT-CIF layer map as a Toped property. \n void setciflaymap(lmap list layer_map )
getciflaymap	Returns TDT-CIF layer map. \n lmap list getciflaymap( bool import )
clearciflaymap	Clean-up the memory from the layer map. \n void clearciflaymap ()
gdsread		Parse a GDSII file.  \n string list gdsread(string file_name)
gdsimport	Convert GDSII structure to TDT cell. \n void gdsimport (string list top_structures, lmap list layer_map, bool recursive, bool overwrite) \n void gdsimport (string top_structure, lmap list layer_map , bool recursive, bool overwrite)
gdsexport	Convert TDT database to GDSII. \n void gdsexport (lmap list layer_map, string filename_name, bool file_size) \n void gdsexport (string cell_name, bool recursive, lmap list layer_map, string filename_name, bool file_size)
gdssplit	Extracts a cell hierarchy from a GDSII file. \n void gdssplit (string  cell_name, string  filename_name, bool recursive)
gdsclose	Clean-up the memory from the GDSII data. \n void gdsclose ()
getgdslaymap	Returns TDT-GDS layer map. \n lmap list getgdslaymap( bool import )
setgdslaymap	Stores a TDT-GDS layer map as a Toped property. \n void setgdslaymap(lmap list layer_map )
cleargdslaymap	Clean-up the memory from the layer map. \n void cleargdslaymap ()
oasisread	Parse an OASIS file. \n string list oasisread(string file_name)
oasisimport	Convert OASIS structure to TDT cell. \n void oasisimport (string list top_structures, lmap list layer_map, bool recursive, bool overwrite) \n void oasisimport (string top_structure, lmap list layer_map , bool recursive, bool overwrite)
oasisclose	Clean-up the memory from the OASIS data. \n void oasisclose ()
getoasislaymap	Returns TDT-OASIS layer map. \n lmap list getoasislaymap(bool import )
setoasislaymap	Stores a TDT-OASIS layer map as a Toped property. \n void setoasislaymap(lmap list layer_map )
clearoasislaymap	Clean-up the memory from the layer map. \n void clearoasislaymap ()
drccalibreimport	Read DRC results file. \n void drccalibreimport(string file_name)
drcshowerror		Show particular DRC error. \n void drcshowerror(string rule_check_name, int error_number)
drcshowcluster		Show selected DRC ruleCheck error. \n void drcshowcluster(string rule_check_name)
drcshowallerrors	Show all DRC errors. \n void drcshowallerrors()
drchideallerrors	Hide all DRC errors. \n void drchideallerrors()
drcexplainerror		Show explaining message for particular error. \n void drcexplainerror(point pickup) \n void drcexplainerror()
grcgetcells	Returns the list of cells of the active layout database which contain invalid layout objects. \n string list grcgetcells ()
grcgetlayers	Returns the list of layers in the current active cell which contain invalid layout objects. \n int list grcgetlayers()
grcgetdata	Returns the list of all GRC objects on a certain layer of the current active cell. \n auxdata list grcgetdata (int layer)
grcrecoverdata	Function generates valid objects which are one to one layout equivalent of the GRC objects on certain layer of the current cell. \n void grcrecoverdata (int layer)
grccleanlayer	Removes all GRC objects from a certain layer in the current active cell. \n void grccleanlayer (int layer)
psexport	Convert TDT database to PostScript file \n void psexport (string cell_name, string file_name)
tdtread		Load a TDT file \n void tdtread (string file_name) \n void tdtread (string file_name, string time_created, string time_updated)
loadlib		Load a TDT file as a library, relink and update the database into memory. \n void loadlib (string file_name)
unloadlib	Unload a library, relink and update the database into memory.  \n void unloadlib (string lib_name)
tdtsave		Save the current design to the disk in TDT format. \n void tdtsave() \n void tdtsave(string time_created, string time_updated)
tdtsaveas	Save the design under a new name to the disk \n void tdtsaveas (string file_name)
opencell	Open an existing cell for editing. \n void opencell (string cell_name)
editpush	Edit in place.  \n void editpush(point edit_here)
editpop		Edit the parent cell in the current cell hierarchy. \n void editpop()
edittop		Edit the top cell in the current cell hierarchy. \n void edittop()
editprev	Edit previous cell. \n void editprev()
usinglayer	Set the default active layer. \n void usinglayer(int layer_number) \n void usinglayer(string layer_name)
addbox		Add a box in the active cell. \n layout addbox(box tell_box, int target_layer) \n layout addbox(point tell_point1, real width, real height, int target_layer) \n layout addbox(point tell_point1, point tell_point2, int target_layer) \n layout addbox(box tell_box) \n layout addbox(point tell_point1, real width, real height) \n layout addbox(point tell_point1, point tell_point1) \n layout addbox() \n layout addbox(int target_layer)
addpoly		Add a polygon in the active cell. \n layout addpoly(point list poly_vertexes, int target_layer) \n layout addpoly(point list poly_vertexes ) \n layout addpoly(int target_layer ) \n layout addpoly()
addwire		Add a wire in the active cell. \n layout addwire(point list wire_vertexes,real width, int target_layer) \n layout addwire(point list wire_vertexes, real width) \n layout addwire(real width, int target_layer) \n layout addwire(real width)
addtext		Add a text object in the active cell. \n layout addtext(string text, int target_layer, point origin, real rotation, bool flipX, real magnification) \n layout addtext(string text, real magnification)
cellref		Add a reference to Toped cell in the active cell. \n layout cellref(string cell_name, point origin, real rotation, bool flipX, real magnification) \n layout cellref(string cell_name)
cellaref	Add an array of cell references in the active cell. \n layout cellaref(string cell_name, point origin, real rotation, bool flipX, real magnification, int column, int row, real stepX, real stepY) \n layout cellaref(string cell_name, point origin, real rotation, bool flipX, real magnification, int column, int row, real stepP1, real stepP2) \n layout cellaref(string cell_name, int column, int  row, real stepX, real stepY)

select		Select Toped objects. \n layout list select(box area) \n layout list select(point pickup) \n layout list select(layout list object_list) \n layout list select()
pselect		Select shape edges overlapped by input box. \n void pselect(box area) \n void pselect()
unselect	Unselect Toped objects. \n layout list unselect(box area) \n layout list unselect(point pickup) \n layout list unselect(layout list object_list) \n layout list unselect()
punselect	Unselect shape edges overlapped by input box. \n void punselect(box area) \n void punselect()
select_all	Select all shapes. \n layout list select_all()
unselect_all	Unselect all objects. \n void unselect_all()
selectmask	Change current selection filter mask \n int selectmask(int smask)
	
move		Move selected objects. \n void move(point start_point, point end_point) \n void move()
copy		Copy selected objects. \n void copy(point start_point, point end_point) \n void copy()
rotate		Rotate selected objects. \n void rotate(point center, real angle) \n void rotate(real angle)
flip		Mirrors the selected objects. \n void flip(direction, point reference) \n void flip(direction)
delete		Delete selected objects. \n void delete()
group		Group selected objects in a cell. \n void group (string cell_name)
ungroup		Ungroup selected cell references. \n void ungroup ()

polycut		Cut selected shapes with a polygon. \n layout list polycut(point list cutting_poly) \n layout list polycut()
boxcut		Cut selected shapes with a box. \n layout list boxcut()
merge		Merge selected shapes. \n layout list merge()
resize		Resize selected shapes. \n void resize(real delta)
changelayer	Transfer objects to another layer. \n void changelayer(int layer)
changeref	Change the cell structure of existing reference or array of references. \n void changeref (string cell_name)
changestr	Change the contents of selected text objects. \n void changestring(string newval).

redraw		Redraws the current window. \n void redraw()
addruler	Create new ruler. \n void addruler(point list points) \n void addruler()
clearrulers	Clear all rulers in the graphic canvas. \n void clearrulers()
longcursor	------------------------
zoom		Zooms in a window. \n void zoom(point corner1,point corner2) \n void zoom(box window)
zoomall		Show entire active cell. \n void zoomall()
zoomvisible	Show the visible part of the active cell. \n void zoomvisible()
layprop		Define the properties of a layer. \n void layprop(string name, int number, string color, string fill, string select_line)
hidelayer	Hide/show Toped layer. \n void hidelayer(int layer_number, bool hide) \n void hidelayer(word list layer_list, bool hide)
hidecellmarks	Hide/show cell mark. \n void hidecellmarks(bool on_off)
hidecellbox	Hide/show cell boundaries \n void hidecellbox(bool on_off)
hidetextmarks	Hide/show text mark. \n void hidetextmarks(bool on_off)
hidetextbox	Hide/show text boundaries \n void hidetextbox(bool on_off)
locklayer	Lock/unlock Toped layer. \n void locklayer(int layer_number, bool lock) \n void locklayer(word list layer_list, bool lock)
filllayer	Switch the fill pattern rendering on/off on a given layer. \n void filllayer(int layer_number, bool fill_on) \n void filllayer(word list layer_list, bool fill_on)
savelaystatus	Save the current status of all defined layers \n savelayerstatus(string lay_set_name)
restorelaystatus	Restores previously saved layer status set. \n restorelayerstatus(string lay_set_name)
deletelaystatus	Delete previously saved layer status set. \n deletelayerstatus(string lay_set_name)
definecolor	Define Toped RGBA color \n void definecolor(string name, int red, int green, int blue,int alpha)
definefill	Define Toped fill pattern \n void definefill(string name, int listpattern)
defineline	Define Toped line style \n void defineline(string name, string color, int pattern, int pat_scale, int width)
definegrid	Define a grid step. \n void definegrid(int grid_number, real step, string color)
step		Define the drawing step. \n void step(real value)
grid		Hide/show a grid set. \n void grid(int grid_number, bool show)
autopan		Pan during mouse movement. \n void autopan(bool on_off)
zerocross	----------------------------
shapeangle	Restrict drawing by angle \n void shapeangle(int angle)
getpoint	Pick up a point by mouse or keyboard \n point getpoint()
getpointlist	Pick up a list of points by mouse or keyboard \n point list getpointlist()
propsave	Save current properties to the disk. \n propsave(string prop_file_name)
addmenu		Adds new menu item or replaces existing one. \n void addmenu(string menupath, string hotkey, string tellfunction)
toolbarsize	Changes the icon size in the toolbars. \n void toolbarsize(toolbar_direction, icon_size)
definetoolbar	Create new toolbar. \n void definetoolbar(string toolbarname)
toolbaradditem	Add an item to the toolbar. \n void toolbaradditem(string toolbar_name, strmap item) \n void toolbaradditem(string toolbar_name, strmap list item_list)
toolbardeleteitem	Delete existing item. \n void toolbardeleteitem(string toolbar_name, string icon_name)
setparams	Set a various Toped session parameters. \n void setparams(strmap param_record ) \n void setparams(strmap lsit param_record_list )
exec		Executes external OS command. \n void exec(string argument)
exit		Exits the current session. \n void exit()
