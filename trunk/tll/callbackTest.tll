//===========================================================================
//                                                                          =
// ------------------------------------------------------------------------ =
//                      TTTTT    EEEE     L       L                         =
//                      T T T    E        L       L                         =
//                        T      EEE      L       L                         =
//                        T      E        L       L                         =
//                        T      EEEEE    LLLLL   LLLLL                     =
//                                                                          =
//   This file is a part of Toped project (C) 2001-2006 Toped developers    =
// ------------------------------------------------------------------------ =
//           $URL$
//        Created: Tue Jun 28 13:16:45 BST 2005
//     Originator: Svilen Krustev - skr@toped.org.uk
//    Description: Basic TELL callback tests
//---------------------------------------------------------------------------
//  Revision info
//---------------------------------------------------------------------------
//      $Revision$
//          $Date$
//        $Author$
//===========================================================================


int simpleAdd(int a, int b)
{
  return (a + b);
}

int simpleSub(int a, int b)
{
  return (a - b);
}

/* The callback type definition follows the function definition syntax
 * with two differencies:
 * - "callback" keyword marks the start of the definition
 * - the argument list is anonymous i.e. just a list of argument types
callback <return_type> <functypename> ([<argument> [, <argument> [...]]])
*/


// define a callback type unifunctype ...
callback int unifunctype(int,int);

// ... and a variable unifunc of that type
unifunctype unifuncA = @simpleAdd;
printf("Callback of type unifuncA - returns %d\n",unifuncA(2,3));
unifuncA = @simpleSub;
printf("Callback of type unifuncA - returns %d\n",unifuncA(2,3));

// or define directly a variable unifunc of anonymous callback type
callback int (int,int) unifuncB = @simpleAdd;
printf("Callback of type unifuncB - returns %d\n",unifuncB(2,3));
unifuncB = @simpleSub;
printf("Callback of type unifuncB - returns %d\n",unifuncB(2,3));

//same for the function argument list - using a pre-defined callback type
void funcArguFuncA(int a, int b, unifunctype unifunc)
{
   int result = unifunc(a,b);
   string buffer = sprintf ("%d fparam %d is %d", a, b, result);
   printf ("[%s] \n",buffer);
}

// ... or anonymous callback type
void funcArguFuncB(int a, int b, callback int (int,int) unifunc)
{
   int result = unifunc(a,b);
   string buffer = sprintf ("%d fparam %d is %d", a, b, result);
   printf ("[%s] \n",buffer);
}

funcArguFuncB(2,3,@simpleAdd);
funcArguFuncB(2,3,@simpleSub);
funcArguFuncA(2,3,@simpleAdd);
funcArguFuncA(2,3,@simpleSub);

