//===========================================================================
//                                                                          =
// ------------------------------------------------------------------------ =
//                      TTTTT    EEEE     L       L                         =
//                      T T T    E        L       L                         =
//                        T      EEE      L       L                         =
//                        T      E        L       L                         =
//                        T      EEEEE    LLLLL   LLLLL                     =
// ------------------------------------------------------------------------ =
//           $URL: http://perun/tpd_svn/trunk/toped_wx/tll/topedmain.tll $
//        Created: Wed, 16 Nov 2005
//     Originator: Svilen Krustev - skr@toped.org.uk
//    Description: Tests for logical operations with polygons
//---------------------------------------------------------------------------
//  Revision info
//---------------------------------------------------------------------------                
//      $Revision: 226 $
//          $Date: 2005-10-09 23:11:18 +0100 (Sun, 09 Oct 2005) $
//        $Author: skr $
//===========================================================================
void  fillSetup() {
   int list diagPatrnForw = {
   0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02,
   0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,
   0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20,
   0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80,
   0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02,
   0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,
   0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20,
   0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80,
   0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02,
   0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,
   0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20,
   0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80,
   0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02,
   0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,
   0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20,
   0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80 };

   int list diagPatrnBack = {
   0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
   0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
   0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04,
   0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01,
   0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
   0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
   0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04,
   0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01,
   0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
   0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
   0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04,
   0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01,
   0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
   0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
   0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04,
   0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01 };

   int list diagStripeForw = {
   0xF0, 0xF0, 0xF0, 0xF0, 0xE1, 0xE1, 0xE1, 0xE1,
   0xC3, 0xC3, 0xC3, 0xC3, 0x87, 0x87, 0x87, 0x87,
   0x0F, 0x0F, 0x0F, 0x0F, 0x1E, 0x1E, 0x1E, 0x1E,
   0x3C, 0x3C, 0x3C, 0x3C, 0x78, 0x78, 0x78, 0x78,
   0xF0, 0xF0, 0xF0, 0xF0, 0xE1, 0xE1, 0xE1, 0xE1,
   0xC3, 0xC3, 0xC3, 0xC3, 0x87, 0x87, 0x87, 0x87,
   0x0F, 0x0F, 0x0F, 0x0F, 0x1E, 0x1E, 0x1E, 0x1E,
   0x3C, 0x3C, 0x3C, 0x3C, 0x78, 0x78, 0x78, 0x78,
   0xF0, 0xF0, 0xF0, 0xF0, 0xE1, 0xE1, 0xE1, 0xE1,
   0xC3, 0xC3, 0xC3, 0xC3, 0x87, 0x87, 0x87, 0x87,
   0x0F, 0x0F, 0x0F, 0x0F, 0x1E, 0x1E, 0x1E, 0x1E,
   0x3C, 0x3C, 0x3C, 0x3C, 0x78, 0x78, 0x78, 0x78,
   0xF0, 0xF0, 0xF0, 0xF0, 0xE1, 0xE1, 0xE1, 0xE1,
   0xC3, 0xC3, 0xC3, 0xC3, 0x87, 0x87, 0x87, 0x87,
   0x0F, 0x0F, 0x0F, 0x0F, 0x1E, 0x1E, 0x1E, 0x1E,
   0x3C, 0x3C, 0x3C, 0x3C, 0x78, 0x78, 0x78, 0x78  };

   int list diagStripeBack = {
   0xF0, 0xF0, 0xF0, 0xF0, 0x78, 0x78, 0x78, 0x78,
   0x2C, 0x2C, 0x2C, 0x2C, 0x1E, 0x1E, 0x1E, 0x1E,
   0x0F, 0x0F, 0x0F, 0x0F, 0x87, 0x87, 0x87, 0x87,
   0xC2, 0xC2, 0xC2, 0xC2, 0xE1, 0xE1, 0xE1, 0xE1,
   0xF0, 0xF0, 0xF0, 0xF0, 0x78, 0x78, 0x78, 0x78,
   0x2C, 0x2C, 0x2C, 0x2C, 0x1E, 0x1E, 0x1E, 0x1E,
   0x0F, 0x0F, 0x0F, 0x0F, 0x87, 0x87, 0x87, 0x87,
   0xC2, 0xC2, 0xC2, 0xC2, 0xE1, 0xE1, 0xE1, 0xE1,
   0xF0, 0xF0, 0xF0, 0xF0, 0x78, 0x78, 0x78, 0x78,
   0x2C, 0x2C, 0x2C, 0x2C, 0x1E, 0x1E, 0x1E, 0x1E,
   0x0F, 0x0F, 0x0F, 0x0F, 0x87, 0x87, 0x87, 0x87,
   0xC2, 0xC2, 0xC2, 0xC2, 0xE1, 0xE1, 0xE1, 0xE1,
   0xF0, 0xF0, 0xF0, 0xF0, 0x78, 0x78, 0x78, 0x78,
   0x2C, 0x2C, 0x2C, 0x2C, 0x1E, 0x1E, 0x1E, 0x1E,
   0x0F, 0x0F, 0x0F, 0x0F, 0x87, 0x87, 0x87, 0x87,
   0xC2, 0xC2, 0xC2, 0xC2, 0xE1, 0xE1, 0xE1, 0xE1 };
   
   int list Cross1 = {
   0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
   0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
   0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
   0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
   0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
   0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
   0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
   0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
   0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

   int list Dots1 = {
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x10, 0x10, 0x10, 0x10,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x10, 0x10, 0x10, 0x10,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x10, 0x10, 0x10, 0x10,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x10, 0x10, 0x10, 0x10,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00 };
   
   int list FatDots1 = {
   0x40, 0x40, 0x40, 0x40, 0xE0, 0xE0, 0xE0, 0xE0,
   0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x40, 0x40, 0x40, 0x40, 0xE0, 0xE0, 0xE0, 0xE0,
   0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x40, 0x40, 0x40, 0x40, 0xE0, 0xE0, 0xE0, 0xE0,
   0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x40, 0x40, 0x40, 0x40, 0xE0, 0xE0, 0xE0, 0xE0,
   0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
   
   int list FatDots2 = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x04, 0x04, 0x04, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 
   0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x04, 0x04, 0x04, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 
   0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x04, 0x04, 0x04, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 
   0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x04, 0x04, 0x04, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 
   0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00 };  
   
   int list vertHash = {
   0x50, 0x00, 0x00, 0x00, 0x50, 0x50, 0x00, 0x00,
   0x50, 0x50, 0x50, 0x00, 0x50, 0x50, 0x50, 0x50,
   0x00, 0x50, 0x50, 0x50, 0x00, 0x00, 0x50, 0x50,
   0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
   0x50, 0x00, 0x00, 0x00, 0x50, 0x50, 0x00, 0x00,
   0x50, 0x50, 0x50, 0x00, 0x50, 0x50, 0x50, 0x50,
   0x00, 0x50, 0x50, 0x50, 0x00, 0x00, 0x50, 0x50,
   0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
   0x50, 0x00, 0x00, 0x00, 0x50, 0x50, 0x00, 0x00,
   0x50, 0x50, 0x50, 0x00, 0x50, 0x50, 0x50, 0x50,
   0x00, 0x50, 0x50, 0x50, 0x00, 0x00, 0x50, 0x50,
   0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
   0x50, 0x00, 0x00, 0x00, 0x50, 0x50, 0x00, 0x00,
   0x50, 0x50, 0x50, 0x00, 0x50, 0x50, 0x50, 0x50,
   0x00, 0x50, 0x50, 0x50, 0x00, 0x00, 0x50, 0x50,
   0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00 };

   int list horiHash = {
   0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x78, 0x78,
   0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x78, 0x78,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C,
   0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E,
   0x00, 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F,
   0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

   definefill("diagPatrnForw" , diagPatrnForw   );
   definefill("diagPatrnBack" , diagPatrnBack   );
   definefill("diagStripeForw", diagStripeForw  );
   definefill("diagStripeBack", diagStripeBack  );
   definefill("Cross1"        , Cross1          );
   definefill("Dots1"         , Dots1           );
   definefill("FatDots1"      , FatDots1        );
   definefill("FatDots2"      , FatDots2        );
   definefill("vertHash"      , vertHash        );
   definefill("horiHash"      , horiHash        );
}

void colorSetup() {
//                              R    G    B   Alpha 
   definecolor("black"       ,   0,   0,   0, 178);
   definecolor("white"       , 255, 255, 255, 178);
   definecolor("darkGray"    ,  80,  80,  80, 178);
   definecolor("gray"        , 127, 127, 127, 178);
   definecolor("lightGray"   , 191, 191, 191, 178);

   definecolor("darkCyan"    ,   0, 127, 127, 178);
   definecolor("darkMagenta" , 127,   0, 127, 178);
   definecolor("darkYellow"  , 127, 127,   0, 178);

   definecolor("past_blue"    ,127, 127, 255, 178);
   definecolor("past_green"   ,127, 255, 127, 178);
   definecolor("past_red"     ,255, 127, 127, 178);
   definecolor("red"          ,255, 0  , 0  , 178);
   definecolor("green"        ,0  , 255, 0  , 178);
   definecolor("blue"         ,0  , 0  , 255, 178);
   definecolor("darkred"      ,127, 0  , 0  , 178);
   definecolor("darkgreen"    ,0  , 127, 0  , 178);
   definecolor("darkblue"     ,0  , 0  , 127, 178);
   definecolor("cyan"         ,0  , 255, 255, 178);
   definecolor("magenta"      ,255, 0  , 255, 178);
   definecolor("yellow"       ,255, 255, 0  , 178);
   definecolor("past_cyan"    ,127, 255, 255, 178);
   definecolor("past_magenta" ,255, 127, 255, 178);
   definecolor("past_yellow"  ,255, 255, 127, 178);
   definecolor("dk_brown"     ,198, 176, 143, 178);
   definecolor("lt_brown"     ,219, 184, 137, 178);
   definecolor("orange"       ,255, 127, 0  , 178);
   definecolor("dark_orange"  ,200, 100, 0  , 178);
   definecolor("brown"        ,128,  64, 0  , 178); 
   definecolor("blue_2"       ,0  , 127, 255, 178);
   definecolor("green_2"      ,127, 255, 0  , 178);
   definecolor("bg_1"         ,224, 224, 224, 178);
}

void layerSetup() {
    colorSetup();
    fillSetup();
//    	     name    	 GDS  Colour       Fill  
   layprop("NWELL"      ,1  ,"yellow"      ,"Dots1"            );
   layprop("ACTIVE"     ,2  ,"blue"        ,"diagStripeBack"   );
   layprop("HIGHPOLY"   ,3  ,"darkGray"    ,""                 );
   layprop("POLY2"      ,4  ,"red"         ,"diagPatrnForw"    );
   layprop("N_IMPL"     ,5  ,"white"       ,""                 );
   layprop("P_IMPL"     ,6  ,"magenta"     ,""                 );
   layprop("CONTACT"    ,7  ,"white"       ,"diagStripeForw"   );   
   layprop("METAL1"     ,8  ,"green"       ,"diagPatrnBack"    );
   layprop("PASS"       ,9  ,"darkGray"    ,"" );  
   layprop("NO_IMPL"    ,10 ,"white"       ,"" );  
   layprop("TUN_OXIDE"  ,11 ,"white"       ,"" );  
   layprop("ANTI_PT"    ,12 ,"white"       ,"" );  
   layprop("P_FIELD"    ,13 ,"white"       ,"" );  
   layprop("POLY1"      ,14 ,"cyan"        ,"Cross1"           );  
   layprop("FUSE"       ,15 ,"white"       ,"" );  
   layprop("ETCH_FUSE"  ,16 ,"white"       ,"" );  
   layprop("VIA12"      ,17 ,"lightGray"   ,"" );  
   layprop("METAL2"     ,18 ,"darkMagenta" ,"" );  
   layprop("N-_IMPL"    ,20 ,"white"       ,"" );  
   layprop("DNWELL"     ,21 ,"white"       ,"" );  
   layprop("Z_TRAN"     ,27 ,"white"       ,"" );  
   layprop("N_FIELD"    ,28 ,"white"       ,"" );  
   layprop("P_BASE"     ,29 ,"white"       ,"" );  
   layprop("PDEEP"      ,36 ,"white"       ,"" );
   layprop("RECOG_R"    ,53 ,"white"       ,"" );
   layprop("RECOG_D"    ,54 ,"white"       ,"" );
   layprop("LOW_VOLT"   ,55 ,"white"       ,"" );
   layprop("NO_CHECK"   ,56 ,"white"       ,"" );
   layprop("RECOG_C"    ,57 ,"white"       ,"" );
   layprop("RECOG_GDT"  ,58 ,"white"       ,"" );
   layprop("TEXT"       ,61 ,"yellow"      ,"" );
   layprop("TEXT"       ,62 ,"white"       ,"" );
   layprop("SCRIBE_LANE",63 ,"white"       ,"" );
}

void screenSetup() {
//   grid No, step in UU, color
   definegrid(0, 1   , "white"   );
   definegrid(1, 10  , "cyan"    );
   definegrid(2, 100 , "yellow"  );
   grid(0,true);
   grid(1,true);
   step(0.5);
   autopan(true);
   shapeangle(45);
}

//void polycheck() {
//   usinglayer(8);
//   addpoly({{1,68},{5,68},{5,68},{8,68},{8,70},{8,70},{8,72},{8,72},{6,72},{6,75},{4,75},{1,75},{1,71},{1,71},{1,68}},8);
//   addpoly({{1,0},{2,1},{1,2},{0,1}},8);
//   addpoly({{11,68},{11,71},{11,71},{11,75},{14,75},{16,75},{16,72},{18,72},{18,72},{18,70},{18,70},{18,68},{15,68},{15,68},{11,68}},8);
//   addpoly({{10,11},{11,12},{12,11},{11,10}},8);
//}

void cut_test1() {
   newcell("cut_test1");
   opencell("cut_test1");
   addpoly({{0,0},{10,0},{10,5},{5,5},{5,10},{0,10}},4);
   select({{-3,-3},{13,13}});
   addpoly({{3,-3},{3,12},{7,12},{7,-3}},2);
   polycut({{3,-3},{3,12},{7,12},{7,-3}});
   move({0,0},{15,0});
}

void cut_test2() {
   newcell("cut_test2");
   opencell("cut_test2");
   addpoly({{0,0},{10,0},{10,5},{5,5},{5,10},{0,10}},4);
   select({{-3,-3},{13,13}});
   addpoly({{-3,-3},{12,-3},{12,3},{7,3},{7,7},{-3,7}},2);
   polycut({{-3,-3},{12,-3},{12,3},{7,3},{7,7},{-3,7}});
   move({0,0},{15,0});
}

void cut_test3() {
   newcell("cut_test3");
   opencell("cut_test3");
   addpoly({{0,0},{10,0},{10,5},{5,5},{5,10},{0,10}},4);
   select({{-3,-3},{13,13}});
   addpoly({{-1.5,-1},{5.5,-1},{5.5,1.5},{12,1.5},{12,7.5},{3,7.5},{3,5},{-1.5,5}},2);
   polycut({{-1.5,-1},{5.5,-1},{5.5,1.5},{12,1.5},{12,7.5},{3,7.5},{3,5},{-1.5,5}});
   move({0,0},{15,0});
}

void cut_test4() {
   newcell("cut_test4");
   opencell("cut_test4");
   addpoly({{0,0},{10,0},{10,5},{5,5},{5,10},{0,10}},4);
   select({{-3,-3},{13,13}});
   addpoly({{-2.5,8},{7,8},{7,3.5},{12.5,3.5},{12.5,-3},{6.5,-3},{6.5,1},{3.5,1},{3.5,-2.5},{-2.5,-2.5}},2);
   polycut({{-2.5,8},{7,8},{7,3.5},{12.5,3.5},{12.5,-3},{6.5,-3},{6.5,1},{3.5,1},{3.5,-2.5},{-2.5,-2.5}});
   move({0,0},{15,0});
}

void cut_test5() {
   newcell("cut_test5");
   opencell("cut_test5");
   addpoly({{0,0},{10,0},{10,5},{5,5},{5,10},{0,10}},4);
   select({{-3,-3},{13,13}});
   addpoly({{-3,1},{12,1},{12,4},{-1,4},{-1,6},{12,6},{12,8},{-3,8}},2);
   polycut({{-3 , 1},{12 , 1},{12 , 4},{-1 , 4},{-1,6},{12,6},{12,8},{-3,8}});
   move({0,0},{15,0});
}

void cut_test6() {
   newcell("cut_test6");
   opencell("cut_test6");
   addpoly({{0,5},{5,0},{10,5},{5,10}},4);
   select_all();
   addpoly({{1,9},{1,1},{9,1},{9,9}}, 2);
   polycut({{1,9},{1,1},{9,1},{9,9}});
   move({0,0},{15,0});
}

void cut_test1A() {
   newcell("cut_test1A");
   opencell("cut_test1A");
   addpoly({{0,5},{5,0},{10,5},{5,10}},4);
   select_all();
   addpoly({{3,3},{7,3},{7,7},{3,7}}, 2);
   polycut({{3,3},{7,3},{7,7},{3,7}});
   move({0,0},{15,0});
}   

void cut_test2A() {
   newcell("cut_test2A");
   opencell("cut_test2A");
   point list workpoly = {{74,-20.5},{74,-23.5},{74,-25.5},{77,-25.5},{77,-29.5},
      {77,-31.5},{80.5,-31.5},{80.5,-37},{90,-37},{90,-35},{86.5,-31.5},
      {86.5,-29},{83.5,-26},{83.5,-23.5},{80.5,-20.5}};
   addpoly(workpoly,4);
   select({{70,-19},{94,-40.5}});
   point list cutpolygon = {{76,-22.5},{80,-22.5},{80,-27.5},{83.5,-27.5},
      {83.5,-31 },{86.5,-34},{86.5,-35.5},{82,-35.5},{82,-30},{79,-30},
      {79,-25}, {76, -25}};
   addpoly(cutpolygon,2);
   polycut(cutpolygon);
   move({0,0},{15,0});
}   

void cut_test3A() {
   // touching diamant inside a box
   newcell("cut_test3A");
   opencell("cut_test3A");
   addpoly({{0,0},{10,0},{10,10},{0,10}}, 2);
   select_all();
   addpoly({{0,5},{5,0},{10,5},{5,10}},4);
   polycut({{0,5},{5,0},{10,5},{5,10}});
   move({0,0},{15,0});
}

void cut_test1B() {
   opencell("cell_1");
   select({{28,23},{48.5,-5}});
   point list cutpoly = { { 45.5 ,23.5 } , { 45.5 ,16.5 } , { 41.5 ,16.5 } , { 41.5 ,11.5 } , { 45.5
   , 11.5 } , { 45.5 ,7 } , { 41.5 ,7 } , { 41.5 ,2.5 } , { 45.5 ,2.5 } , { 45.5 ,-3 } , { 37.5 ,-3
   } , { 37.5 ,2 } , { 29 ,2 } , { 29 ,6.5 } , { 37 ,6.5 } , { 37 ,11.5 } , { 29 ,11.5 } , { 29 ,
   16 } , { 37 ,16 } , { 37 ,23.5 } };
   addpoly(cutpoly,6);
   polycut(cutpoly);
   move({0,0},{15,0});
}   

void cut_test2B() {
   // touching malta cross
   newcell("cut_test2B");
   opencell("cut_test2B");
   addbox({{0,0},{10,10}},2);
   point list malta = {{ 0,4},{ 4,4},{ 4,0},{ 6,0},{ 6,4},{10, 4},{10, 6},{ 6,6},{ 6, 10},{ 4,10},{ 4,6},{ 0,6}};
   select_all();
   addpoly(malta,4);
   polycut(malta);
   move({0,0},{15,0});
}   

void cut_test3B() {
   // piercing edge points
   newcell("cut_test3B");
   opencell("cut_test3B");
   point list pgon4= { { -2 , 7 } , { 0 , 7 } , { 3 , 10 } , { 3 , 12 } , { 7 , 12 } , 
                       { 7 , 10 } , { 10 , 7 } , { 12 , 7 } , { 12 , 3 } , { 10 , 3 } , 
                       { 7 , 0 } , { 7 , -2 } , { 3 , -2 } , { 3 , 0 } , { 0 , 3 } , { -2 , 3 } };
   point list pgon2= {{0,0},{10,0},{10,10},{0,10}};
   addpoly(pgon4, 4);
   select_all();
   addpoly(pgon2, 2);
   polycut(pgon2);
   move({0,0},{15,0});
}
   
void cut_test4B() {
   // bowtie
   newcell("cut_test4B");
   opencell("cut_test4B");
   addpoly({{4,10},{5,10},{8,7},{11,10},{12,10},{12,4},{11,4},{8,7},{5,4},{4,4}},2);
   select({5.5,6.5});
//   polycut({{3,7},{13,7},{13,2.5},{3,2.5}});
}

void merge_test1() {
   newcell("merge_test1");
   opencell("merge_test1");
   addbox({{0,0},{10,10}}, 2);
   addbox({{5,5},{15,15}}, 2);
   select_all();
   merge();
}

void merge_test2() {
   newcell("merge_test2");
   opencell("merge_test2");
   addbox({{0,0},{10,10}}, 2);
   addpoly({{8,-2},{14,-2},{14,12},{8,12},{8,8},{12,8},{12,2},{8,2}}, 2);
   select_all();
   merge();
}   

void merge_test3() {
   newcell("merge_test3");
   opencell("merge_test3");
   addpoly({{0,0},{10,0},{10,5},{5,5},{5,11},{10,11},{10,16.5},{5,16.5},{5,22},{10,22},{10,27},{0,27}},2);
   addpoly({{8,1.5},{20,1.5},{20,25},{8,25},{8,23},{17,23},{17,15},{8,15},{8,12},{17,12},{17,4},{8,4}},2);
   select_all();
   merge();
//addpoly({{0,0},{0,10},{5,10},{5,8},{2,8},{2,2},{5,2},{5,0}},2);
//addpoly({{4,10},{10,10},{10,0},{4,0},{4,2},{8,2},{8,8},{4,8}},2);
}   

void merge_test4() {
   newcell("merge_test4");
   opencell("merge_test4");
   addbox({{0,0},{10,10}},2);
   addbox({{8,8},{18,18}},2);
   addbox({{2,2},{-8,-8}},2);
   select_all();
   merge();
   undo();
   addbox({8.0,47.0},{25.0,30.0},4);   
   addbox({8.2,47.2},{25.2,30.2},8);   
}   

void edge_cut1()
{
   newcell("edge_cut1");
   opencell("edge_cut1");
   addbox( { { 0 , 0 } , { 10 , 10 } });
   select({5.00,5.00});
   polycut( { { 0 , 4 } , { 0 , 6 } , { 3 , 6 } , { 3 , 4 } });
   move({0,0},{15,0});
   unselect_all();

   select({5.00,5.00});
   polycut( { { 4 , 0 } , { 6 , 0 } , { 6 , 3 } , { 4 , 3 } });
   move({0,0},{15,0});
   unselect_all();

   select({5.00,5.00});
   polycut( { { 10 , 4 } , { 10 , 6 } , { 7 , 6 } , { 7 , 4 } });
   move({0,0},{15,0});
   unselect_all();

   select({5.00,5.00});
   polycut( { { 4 , 10 } , { 6 , 10 } , { 6 , 7 } , { 4 , 7 } });
   move({0,0},{15,0});
   unselect_all();
}

void edge_cut2() {
   newcell("edge_cut2");
   opencell("edge_cut2");
   addbox({{0,0} , {10,10}},2);
   select({5.00,5.00});
   addpoly({{-2,4},{0,4},{0,6},{3,6},{3,-2},{-2,-2}},4);
   polycut({{-2,4},{0,4},{0,6},{3,6},{3,-2},{-2,-2}});
   move({0,0},{15,0});
   unselect_all();

   select({5.00,5.00});
   addpoly({{4,3},{4,0},{6,0},{6,-2},{12,-2},{12,3}},4);
   polycut({{4,3},{4,0},{6,0},{6,-2},{12,-2},{12,3}});
   move({0,0},{15,0});
   unselect_all();

   select({5.00,5.00});
   addpoly({{7,4},{10,4},{10,6},{12,6},{12,12},{7,12}},4);
   polycut({{7,4},{10,4},{10,6},{12,6},{12,12},{7,12}});
   move({0,0},{15,0});
   unselect_all();

   select({5.00,5.00});
   addpoly({{6,7},{6,10},{4,10},{4,12},{-2,12},{-2,7}},4);
   polycut({{6,7},{6,10},{4,10},{4,12},{-2,12},{-2,7}});
   move({0,0},{15,0});
   unselect_all();
}

void edge_cut3() {
   newcell("edge_cut3");
   opencell("edge_cut3");
   addbox({{0,0} , {10,10}},2);
   select({5.00,5.00});
   addpoly({{0,0},{0,4},{4,4},{4,0}},4);
   polycut({{0,0},{0,4},{4,4},{4,0}});
   move({0,0},{15,0});
   unselect_all();

   select({5.00,5.00});
   addpoly({{6,0},{6,4},{10,4},{10,0}},4);
   polycut({{6,0},{6,4},{10,4},{10,0}});
   move({0,0},{15,0});
   unselect_all();

   select({5.00,5.00});
   addpoly({{6,10},{6,6},{10,6},{10,10}},4);
   polycut({{6,10},{6,6},{10,6},{10,10}});
   move({0,0},{15,0});
   unselect_all();

   select({5.00,5.00});
   addpoly({{0,6},{0,10},{4,10},{4,6}},4);
   polycut({{0,6},{0,10},{4,10},{4,6}});
   move({0,0},{15,0});
   unselect_all();
}

void edge_cut4() {
   newcell("edge_cut4");
   opencell("edge_cut4");
   addbox({{0,0} , {10,10}},2);

   select({5.00,5.00});
   addpoly({{0,0},{3,0},{3,10},{0,10}},4);
   polycut({{0,0},{3,0},{3,10},{0,10}});
   move({0,0},{15,0});
   unselect_all();
//
   select({5.00,5.00});
   addpoly({{3,7},{3,10},{10,10},{10,7}},4);
   polycut({{3,7},{3,10},{10,10},{10,7}});
   move({0,0},{15,0});
   unselect_all();
//
   select({5.00,5.00});
   addpoly({{10,0},{10,7},{7,7},{7,0}},4);
   polycut({{10,0},{10,7},{7,7},{7,0}});
   move({0,0},{15,0});
   unselect_all();

   select({5.00,5.00});
   addpoly({{3,0},{7,0},{7,3},{3,3}},4);
   polycut({{3,0},{7,0},{7,3},{3,3}});
   move({0,0},{15,0});
   unselect_all();
}

void edge_cut5()
{
   newcell("edge_cut5");
   opencell("edge_cut5");
   point list sheriff_star = {{8.5,8.5},{6.5,8.5},{5,10},{3.5,8.5},
                              {1.5,8.5},{1.5,6.5},{0,5},{1.5,3.5},
                              {1.5,1.5},{3.5,1.5},{5,0},{6.5,1.5},
                              {8.5,1.5},{8.5,3.5},{10,5},{8.5,6.5}};
   addpoly(sheriff_star, 2);
   select({5.00,5.00});
   polycut({{ 8.5 , 3.5 }, {  10 , 3.5 },{  10 , 6.5 },{ 8.5 , 6.5 }});
   move({0,0},{15,0});
   unselect_all();
   select({5.00,5.00});
   polycut({{ 3.5 , 8.5 }, { 6.5 , 8.5 },{ 6.5 ,  10 },{ 3.5 ,  10 }});
   move({0,0},{15,0});
   unselect_all();
   select({5.00,5.00});
   polycut({{   0 , 6.5 }, { 1.5 , 6.5 },{ 1.5 , 3.5 },{   0 , 3.5 }});
   move({0,0},{15,0});
   unselect_all();
   select({5.00,5.00});
   polycut({{ 3.5 , 1.5 }, { 6.5 , 1.5 },{ 6.5 ,   0 },{ 3.5 ,   0 }});
   move({0,0},{15,0});
   unselect_all();
}

void polycrash() {
   addpoly( { { 0 , 36 } , { 9 , 36 } , { 9 , 28 } , { 4 , 28 } , { 0 , 32 } }, 2);
   select({6.50,30.50});
   addpoly({ { 0 , 28.5 } , { 3.5 , 32 } , { 0 , 32 } , { -1.5 , 30.5 } }, 4);
   polycut({ { 0 , 28.5 } , { 3.5 , 32 } , { 0 , 32 } , { -1.5 , 30.5 } });
}

void edge_merge1() 
{
   newcell("edge_merge1");
   opencell("edge_merge1");
   addbox( { { 0 , 0 } , { 10 , 10 } });
   addbox( { { 10 , 3 } , { 15 , 7 } });
   addbox( { { -5 , 3 } , {  0 , 7 } });
   addbox( { { 3 , -5 } , { 7 , 0 } });
   addbox( { { 3 , 10 } , { 7 , 15 } });
   select_all();
   merge();
}

void edge_merge2() {
   newcell("edge_merge2");
   opencell("edge_merge2");
   addbox({{0,0} , {10,10}},2);
   addpoly({{-2,4},{0,4},{0,6},{3,6},{3,-2},{-2,-2}},2);
   addpoly({{4,3},{4,0},{6,0},{6,-2},{12,-2},{12,3}},2);
   addpoly({{7,4},{10,4},{10,6},{12,6},{12,12},{7,12}},2);   
   addpoly({{6,7},{6,10},{4,10},{4,12},{-2,12},{-2,7}},2);
   select_all();
   merge();
}

void edge_merge3() {
   newcell("edge_merge3");
   opencell("edge_merge3");
   addbox({{0,0} , {10,10}},2);
   addbox({{10,0} , {20,10}},2);
   addbox({{0,10} , {10,20}},2);
   addbox({{0,0} , {-10,10}},2);
   addbox({{0,0} , {10,-10}},2);
   select_all();
   merge();
}

void edge_merge4() {
   newcell("edge_merge4");
   opencell("edge_merge4");
   addpoly({{7,0},{10,3},{10,7},{7,10},{3,10},{0,7},{0,3},{3,0}}, 2);
   addpoly({{10,7},{12,9},{9,12},{7,10}}, 2);
   addpoly({{9,-2},{12,1},{10,3},{7,0}}, 2);
   addpoly({{3,10},{1,12},{-2,9},{0,7}}, 2);//{ { 0 , 7 } , { -2 , 9 } , { 1 , 12 } , { 3 , 10 } }
   addpoly({{3,0},{1,-2 },{-2,1},{0,3}}, 2);
   select_all();
   merge();
}

void all_cut()
{
   cut_test1();
   cut_test2();
   cut_test3();
   cut_test4();
   cut_test5();
   cut_test6();
   cut_test1A();
   cut_test2A();
   cut_test3A();
   cut_test2B();
   cut_test3B();
   edge_cut1();
   edge_cut2();
   edge_cut3();
   edge_cut4();
   edge_cut5();
   zoomall();
}

void all_merge()
{
   merge_test1();
   merge_test2();
   merge_test3();
   merge_test4();
   edge_merge1();
   edge_merge2();
   edge_merge3();
   edge_merge4();
   zoomall();
}

void all_tests()
{
   all_cut();
   all_merge();
}

void bug1() 
{
   newcell("bug1");
   opencell("bug1");
   addbox( { { 2 , 7 } , { 18 , 17.5 } }, 2);
   select({8.50,8.50});
   rotate({ 2 , 7 },30);
   select({3.50,8.00});
   addpoly( { { 1.5 , 5.5 } , { 4 , 5.5 } , { 4 , 7 } , { 2 , 7 } , { 1.5 , 7 } }, 4);
//   polycut( { { 1.5 , 5.5 } , { 4 , 5.5 } , { 4 , 7 } , { 2 , 7 } , { 1.5 , 7 } });
}

void bug2() 
{
   newcell("bug2");
   opencell("bug2");
   addbox( { { 2 , 7 } , { 18 , 17.5 } },2);
   select({8.50,8.50});
   rotate({ 2 , 7 },30);
   select({3.50,8.00});
   addpoly({ { 2.5 , 6 } , { 3 , 6 } , { 3 , 7.5 } , { 2 , 7.5 } , { 2 , 7 } , { 2.5 , 7 } }, 4);
//   polycut({ { 2.5 , 6 } , { 3 , 6 } , { 3 , 7.5 } , { 2 , 7.5 } , { 2 , 7 } , { 2.5 , 7 } });
}

void bug3()
{
   newcell("bug3");
   opencell("bug3");
   addbox( { { 2 , 7 } , { 18 , 17.5 } });
   select({8.50,8.50});
   rotate({ 2 , 7 },30);
   select({3.50,8.00});
   addpoly( { { 2.5 , 10 } , { 5.5 , 10 } , { 5.5 , 8.5 } , { 2 , 8.5 } , { 2 , 7 } , { 1.5 , 7 } , { 1.5 ,
   10 } },4);
//   polycut( { { 2.5 , 10 } , { 5.5 , 10 } , { 5.5 , 8.5 } , { 2 , 8.5 } , { 2 , 7 } , { 1.5 , 7 } , { 1.5 , 10 } });
}

layerSetup();
screenSetup();
newdesign("layout_logic");
newcell("boza");
opencell("boza");


//cut_test3A();
//
//all_tests();

//opencell("top");
//addpoly({{-9.5,21.5},{-9.5,33},{15,33},{15,21.5},{10.5,21.5},{10.5,28},{5.5,28},{5.5,21.5},{0,21.5},{0,28},{-6,28},{-6,21.5}},2);

//unselect_all();
//zoom(({70,-19},{94,-40.5}));
// End of cut test

//cellref("cell_1",{0,0},  0,false,1);
//cellref("cell_1",{0,0}, 90,false,1);
//cellref("cell_1",{0,0},180,false,1);
//cellref("cell_1",{0,0},270,false,1);
//OK
//cellref("cell_1",{  0,),  0,false,1);
//cellref("cell_1",{ 60,),  0,false,1);
//cellref("cell_1",{120,0},  0,false,1);
//cellref("cell_1",{180,0},  0,false,1);
//fail
//cellref("cell_1",{  100, 100},  0,false,1);
//cellref("cell_1",{  0,20},  0, true,1);
//cellref("cell_1",{ 60, 0},  0,false,1);
//cellref("cell_1",{ 60,20},  0, true,1);

//select({{-8,-3},{54,104}});
//copy({0,0},{0,110});
//unselect_all();
//select({{-8,-3},{54,104}});
//delete();
//zoomall();

