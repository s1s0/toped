//===========================================================================
//                                                                          =
//  License terms and conditions - not clear yet                            =
// ------------------------------------------------------------------------ =
//                      TTTTT    EEEE     L       L                         =
//                      T T T    E        L       L                         =
//                        T      EEE      L       L                         =
//                        T      E        L       L                         =
//                        T      EEEEE    LLLLL   LLLLL                     =
// ------------------------------------------------------------------------ =
//           $URL: http://perun/tpd_svn/trunk/toped_wx/tll/topedmain.tll $
//  Creation date: Tue Jun 28 13:16:45 BST 2005
//     Created by: Svilen Krustev - s_krustev@yahoo.com
//      Copyright: (C) 2001-2005 by Svilen Krustev
//    Description: 
//---------------------------------------------------------------------------
//  Revision info
//---------------------------------------------------------------------------                
//      $Revision: 163 $
//          $Date: 2005-06-13 18:24:02 +0100 (Mon, 13 Jun 2005) $
//        $Author: skr $
//===========================================================================

void  fillSetup() {
   int list diagPatrnForw = {
   0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02,
   0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,
   0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20,
   0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80,
   0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02,
   0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,
   0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20,
   0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80,
   0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02,
   0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,
   0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20,
   0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80,
   0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02,
   0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08,
   0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20,
   0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80 };

   int list diagPatrnBack = {
   0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
   0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
   0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04,
   0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01,
   0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
   0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
   0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04,
   0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01,
   0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
   0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
   0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04,
   0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01,
   0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
   0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x10,
   0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04,
   0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01 };

   int list diagStripeForw = {
   0xF0, 0xF0, 0xF0, 0xF0, 0xE1, 0xE1, 0xE1, 0xE1,
   0xC3, 0xC3, 0xC3, 0xC3, 0x87, 0x87, 0x87, 0x87,
   0x0F, 0x0F, 0x0F, 0x0F, 0x1E, 0x1E, 0x1E, 0x1E,
   0x3C, 0x3C, 0x3C, 0x3C, 0x78, 0x78, 0x78, 0x78,
   0xF0, 0xF0, 0xF0, 0xF0, 0xE1, 0xE1, 0xE1, 0xE1,
   0xC3, 0xC3, 0xC3, 0xC3, 0x87, 0x87, 0x87, 0x87,
   0x0F, 0x0F, 0x0F, 0x0F, 0x1E, 0x1E, 0x1E, 0x1E,
   0x3C, 0x3C, 0x3C, 0x3C, 0x78, 0x78, 0x78, 0x78,
   0xF0, 0xF0, 0xF0, 0xF0, 0xE1, 0xE1, 0xE1, 0xE1,
   0xC3, 0xC3, 0xC3, 0xC3, 0x87, 0x87, 0x87, 0x87,
   0x0F, 0x0F, 0x0F, 0x0F, 0x1E, 0x1E, 0x1E, 0x1E,
   0x3C, 0x3C, 0x3C, 0x3C, 0x78, 0x78, 0x78, 0x78,
   0xF0, 0xF0, 0xF0, 0xF0, 0xE1, 0xE1, 0xE1, 0xE1,
   0xC3, 0xC3, 0xC3, 0xC3, 0x87, 0x87, 0x87, 0x87,
   0x0F, 0x0F, 0x0F, 0x0F, 0x1E, 0x1E, 0x1E, 0x1E,
   0x3C, 0x3C, 0x3C, 0x3C, 0x78, 0x78, 0x78, 0x78  };

   int list diagStripeBack = {
   0xF0, 0xF0, 0xF0, 0xF0, 0x78, 0x78, 0x78, 0x78,
   0x2C, 0x2C, 0x2C, 0x2C, 0x1E, 0x1E, 0x1E, 0x1E,
   0x0F, 0x0F, 0x0F, 0x0F, 0x87, 0x87, 0x87, 0x87,
   0xC2, 0xC2, 0xC2, 0xC2, 0xE1, 0xE1, 0xE1, 0xE1,
   0xF0, 0xF0, 0xF0, 0xF0, 0x78, 0x78, 0x78, 0x78,
   0x2C, 0x2C, 0x2C, 0x2C, 0x1E, 0x1E, 0x1E, 0x1E,
   0x0F, 0x0F, 0x0F, 0x0F, 0x87, 0x87, 0x87, 0x87,
   0xC2, 0xC2, 0xC2, 0xC2, 0xE1, 0xE1, 0xE1, 0xE1,
   0xF0, 0xF0, 0xF0, 0xF0, 0x78, 0x78, 0x78, 0x78,
   0x2C, 0x2C, 0x2C, 0x2C, 0x1E, 0x1E, 0x1E, 0x1E,
   0x0F, 0x0F, 0x0F, 0x0F, 0x87, 0x87, 0x87, 0x87,
   0xC2, 0xC2, 0xC2, 0xC2, 0xE1, 0xE1, 0xE1, 0xE1,
   0xF0, 0xF0, 0xF0, 0xF0, 0x78, 0x78, 0x78, 0x78,
   0x2C, 0x2C, 0x2C, 0x2C, 0x1E, 0x1E, 0x1E, 0x1E,
   0x0F, 0x0F, 0x0F, 0x0F, 0x87, 0x87, 0x87, 0x87,
   0xC2, 0xC2, 0xC2, 0xC2, 0xE1, 0xE1, 0xE1, 0xE1 };
   
   int list Cross1 = {
   0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
   0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
   0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
   0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
   0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
   0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
   0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
   0x28, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10,
   0x28, 0x28, 0x28, 0x28, 0x44, 0x44, 0x44, 0x44,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

   int list Dots1 = {
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x10, 0x10, 0x10, 0x10,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x10, 0x10, 0x10, 0x10,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x10, 0x10, 0x10, 0x10,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x10, 0x10, 0x10, 0x10,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00 };
   
   int list FatDots1 = {
   0x40, 0x40, 0x40, 0x40, 0xE0, 0xE0, 0xE0, 0xE0,
   0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x40, 0x40, 0x40, 0x40, 0xE0, 0xE0, 0xE0, 0xE0,
   0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x40, 0x40, 0x40, 0x40, 0xE0, 0xE0, 0xE0, 0xE0,
   0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x40, 0x40, 0x40, 0x40, 0xE0, 0xE0, 0xE0, 0xE0,
   0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
   
   int list FatDots2 = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x04, 0x04, 0x04, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 
   0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x04, 0x04, 0x04, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 
   0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x04, 0x04, 0x04, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 
   0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x04, 0x04, 0x04, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 
   0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00 };  
   
   int list vertHash = {
   0x50, 0x00, 0x00, 0x00, 0x50, 0x50, 0x00, 0x00,
   0x50, 0x50, 0x50, 0x00, 0x50, 0x50, 0x50, 0x50,
   0x00, 0x50, 0x50, 0x50, 0x00, 0x00, 0x50, 0x50,
   0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
   0x50, 0x00, 0x00, 0x00, 0x50, 0x50, 0x00, 0x00,
   0x50, 0x50, 0x50, 0x00, 0x50, 0x50, 0x50, 0x50,
   0x00, 0x50, 0x50, 0x50, 0x00, 0x00, 0x50, 0x50,
   0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
   0x50, 0x00, 0x00, 0x00, 0x50, 0x50, 0x00, 0x00,
   0x50, 0x50, 0x50, 0x00, 0x50, 0x50, 0x50, 0x50,
   0x00, 0x50, 0x50, 0x50, 0x00, 0x00, 0x50, 0x50,
   0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
   0x50, 0x00, 0x00, 0x00, 0x50, 0x50, 0x00, 0x00,
   0x50, 0x50, 0x50, 0x00, 0x50, 0x50, 0x50, 0x50,
   0x00, 0x50, 0x50, 0x50, 0x00, 0x00, 0x50, 0x50,
   0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00 };

   int list horiHash = {
   0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x78, 0x78,
   0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x78, 0x78,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C,
   0x00, 0x00, 0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E,
   0x00, 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F,
   0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

   definefill("diagPatrnForw" , diagPatrnForw   );
   definefill("diagPatrnBack" , diagPatrnBack   );
   definefill("diagStripeForw", diagStripeForw  );
   definefill("diagStripeBack", diagStripeBack  );
   definefill("Cross1"        , Cross1          );
   definefill("Dots1"         , Dots1           );
   definefill("FatDots1"      , FatDots1        );
   definefill("FatDots2"      , FatDots2        );
   definefill("vertHash"      , vertHash        );
   definefill("horiHash"      , horiHash        );
}

void colorSetup() {
//                              R    G    B   Alpha 
   definecolor("black"       ,   0,   0,   0, 178);
   definecolor("white"       , 255, 255, 255, 178);
   definecolor("darkGray"    ,  80,  80,  80, 178);
   definecolor("gray"        , 127, 127, 127, 178);
   definecolor("lightGray"   , 191, 191, 191, 178);

   definecolor("darkCyan"    ,   0, 127, 127, 178);
   definecolor("darkMagenta" , 127,   0, 127, 178);
   definecolor("darkYellow"  , 127, 127,   0, 178);

   definecolor("past_blue"    ,127, 127, 255, 178);
   definecolor("past_green"   ,127, 255, 127, 178);
   definecolor("past_red"     ,255, 127, 127, 178);
   definecolor("red"          ,255, 0  , 0  , 178);
   definecolor("green"        ,0  , 255, 0  , 178);
   definecolor("blue"         ,0  , 0  , 255, 178);
   definecolor("darkred"      ,127, 0  , 0  , 178);
   definecolor("darkgreen"    ,0  , 127, 0  , 178);
   definecolor("darkblue"     ,0  , 0  , 127, 178);
   definecolor("cyan"         ,0  , 255, 255, 178);
   definecolor("magenta"      ,255, 0  , 255, 178);
   definecolor("yellow"       ,255, 255, 0  , 178);
   definecolor("past_cyan"    ,127, 255, 255, 178);
   definecolor("past_magenta" ,255, 127, 255, 178);
   definecolor("past_yellow"  ,255, 255, 127, 178);
   definecolor("dk_brown"     ,198, 176, 143, 178);
   definecolor("lt_brown"     ,219, 184, 137, 178);
   definecolor("orange"       ,255, 127, 0  , 178);
   definecolor("dark_orange"  ,200, 100, 0  , 178);
   definecolor("brown"        ,128,  64, 0  , 178); 
   definecolor("blue_2"       ,0  , 127, 255, 178);
   definecolor("green_2"      ,127, 255, 0  , 178);
   definecolor("bg_1"         ,224, 224, 224, 178);
}

void layerSetup() {
    colorSetup();
    fillSetup();
//    	     name    	 GDS  Colour       Fill  
   layprop("NWELL"      ,1  ,"yellow"      ,"Dots1"            );
   layprop("ACTIVE"     ,2  ,"blue"        ,"diagStripeBack"   );
   layprop("UNKWN_1"    ,3  ,"darkGray"    ,""                 );
   layprop("POLY"       ,4  ,"red"         ,"diagPatrnForw"    );
   layprop("N_IMPL"     ,5  ,"white"       ,""                 );
   layprop("P_IMPL"     ,6  ,"magenta"     ,""                 );
   layprop("CONTACT"    ,7  ,"white"       ,"diagStripeForw"   );   
   layprop("METAL1"     ,8  ,"green"       ,"diagPatrnBack"    );
   layprop("PASS"       ,9  ,"darkGray"    ,"" );  
   layprop("UNKWN_2"    ,10 ,"white"       ,"" );  
   layprop("UNKWN_3"    ,11 ,"white"       ,"" );  
   layprop("UNKWN_3"    ,12 ,"white"       ,"" );  
   layprop("P_FIELD"    ,13 ,"white"       ,"" );  
   layprop("POLY1"      ,14 ,"cyan"        ,"Cross1"           );  
   layprop("FUSE"       ,15 ,"white"       ,"" );  
   layprop("VIA12"      ,17 ,"lightGray"   ,"" );  
   layprop("METAL2"     ,18 ,"darkMagenta" ,"" );  
   layprop("TEXT"       ,60 ,"yellow"      ,"" );
   layprop("SCRIBE_LANE",63 ,"white"       ,"" );
}

void screenSetup() {
//   grid No, step in UU, color
   definegrid(0, .25 , "white"   );
   definegrid(1, 2   , "cyan"    );
   definegrid(2, 10  , "yellow"  );
   grid(0,true);
   grid(1,true);
   step(0.5);
   autopan(true);
   shapeangle(45);
}

void bug() 
{
   addbox( { { 0 , 0 } , { 10 , 10 } });
   select({8.00,6.00});
//   rotate({8.00, 6.00},90);
   // Bug in the cut/merge algo here when cutting polygon edge coincides 
   // with the box edge
//   polycut( { { 4 , -5 } , { 8 , -5 } , { 8 , 5 } , { 4 , 5 } });
   polycut( { { 0 , 1 } , { 0 , 5 } , { 5 , 5 } , { 5 , 1 } });
   // Alternatively as a temporary workaround...
//   polycut( { { 3 , -5 } , { 8 , -5 } , { 8 , 5 } , { 3 , 5 } });
   // for Pi shape,
   //polycut({ { 5.5 , -2.5 } , { 5.5 , 6 } , { 12.5 , 6 } , { 12.5 , -2.5 } });
}

void edge_cut1() 
{
   addbox( { { 0 , 0 } , { 10 , 10 } });
   select({5.00,5.00});
   polycut( { { 0 , 4 } , { 0 , 6 } , { 3 , 6 } , { 3 , 4 } });
   unselect_all();
   select({5.00,5.00});
   polycut( { { 4 , 0 } , { 6 , 0 } , { 6 , 3 } , { 4 , 3 } });
   unselect_all();
   select({5.00,5.00});
   polycut( { { 10 , 4 } , { 10 , 6 } , { 7 , 6 } , { 7 , 4 } });
   unselect_all();
   select({5.00,5.00});
   polycut( { { 4 , 10 } , { 6 , 10 } , { 6 , 7 } , { 4 , 7 } });
   unselect_all();
}

void edge_cut2() 
{
   addbox( { { 0 , 0 } , { 10 , 10 } });
   select({5.00,5.00});
   polycut( { { 0 , -1 } , { 0 , 4 } , { 3 , 4 } , { 3 , -1 } });
   unselect_all();
//   select({5.00,5.00});
//   polycut( { { 11 , 0 } , { 6 , 0 } , { 6 , 3 } , { 11 , 3 } });
//   unselect_all();
//   select({5.00,5.00});
//   polycut( { { 7 , 11 } , { 10 , 11 } , { 10 , 6 } , { 7 , 6 } });
//   unselect_all();
   select({5.00,5.00});
   polycut( { { -1 , 10 } , { -1 , 7 } , { 4 , 7 } , { 4 , 10 } });
   unselect_all();
}

void edge_cut3() 
{
   addbox( { { 0 , 0 } , { 10 , 10 } });
//   addbox( { { 10 , -3 } , { 20 , 13 } });
//   addbox( { { 10 , 3 } , { 20 , 7 } });
   addbox( { { -5 , 8 } , { 0 , 2 } });
   select({5,5});
   select({-3,5});
//   polycut( { { -1 , 6 } , { -1 , 4 } , { 4 , 4 } , { 4 , 5 } , { 0 , 5} , { 0 , 6} });
}

layerSetup();
screenSetup();
newdesign("seed");
newcell("crop");
opencell("crop");
