void CheckLists() {
   point list p1 = {{0,0},{2,0},{2,1},{1,1},{1,2},{0,2}};
   real  a0 = 11;
   real  a1 = 12;
   real  a2 = 13;
   real  a3 = 14;
   point list p2;
   p2 = {{a0,a0},{a3,a0},{a3,a3},{a1,a3},{a1,a1},{a2,a1},{a2,a2},{a1,a2},{a1,a3},{a0,a3}};
//   usinglayer(1);
//   addpoly(p1);
//   addpoly(p2);
//   point list p3 = {{20,10}, {22,10}, {22,12}, {24,12}, {26,14}, {28,14}, {30,12}, {30,10}};
//   usinglayer(8);
//   addwire(p3,1);
//   addwire({{-5,0},{-5,40}, {40,40}, {40,0}},2);
//   addwire({{-5,0},{40,0}},2);
//   addwire({{35,5},{35,30}},2);
//

   echo("===================================");
   point current;
   foreach (current;p2)
   {
      echo(current);
      echo("------------");
   };

   echo("===================================");
   int list boza_list = {1,2,3,4,5};
   foreach (int boza; boza_list)
   {
      echo(boza);
      echo("------------");
   };
      
   echo("===================================");
   foreach (int boza; int list {5,4,3,2,1})
   {
      echo(boza);
      echo("------------");
   };

//   list     [+ (scalar || list)    // add one to the front of the list   push_front
//   list     +] (scalar || list)    // add one to the back of the list	 push_back
//   scalar   [- list;       	   // take the first out of the list     pop_front
//   scalar   -] list;       	   // take the last out of the list      pop_back

//   list     += (scalar || list)    // add one to the front of the list   push_front, unshift
//   list     =+ (scalar || list)    // add one to the back of the list    push_back , push
//   list     -= (int);       	   // take the first out of the list     pop_front , shift
//   list     =- (int);       	   // take the last out of the list      pop_back  , pop
   
//   list     = {scalar, list  }   // add one to the front of the list   push_front, unshift
//   list     = {  list, scalar}   // add one to the back of the list    push_back , push

//   lenght(list);
//   first(list);
//   last(list);
}



//operation                        as function                                  as operator
//fist in the list       <type> = first(<type_list>)              <type>     =    <type_list>[=
//last in the list       <type> = last(<type_list>)              <type>      =   <type_list> =]
//indexing                                                                     <type>      =   <type_list>[integer]
//insert in front      push_front(<type_list>, <type>)    <type_list>  =  <type_list>   [+  <type>
//push back            push_back(<type_list>, <type>)    <type_list>  =  <type_list>    +]  <type>
//remove first         <type> = pop_front(<type_list>)   <type_list>  =  <type_list>   [- integer
//pop back              <type> = pop_back(<type_list>)   <type_list>  =  <type_list>   -] integer
//
//list length             <int> = length(<type_list>)           integer          = <type_list>[]
//
//int counter;
//int list test_list = {1,2,3,4,5,6,7};
//while ( counter < length(test_list))
//{
//   echo(counter); counter++;
//}
//
//while ( counter < last(test_list))
//{
//   echo(pop_front(test_list));
//}
//}
//{
//   echo(counter)
//}


