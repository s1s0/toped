#ifndef __TECHNOLOGY_DRC_DEFINITIONS__
#define __TECHNOLOGY_DRC_DEFINITIONS__

//===========================================================================
//                                                                          =
// ------------------------------------------------------------------------ =
//                      TTTTT    EEEE     L       L                         =
//                      T T T    E        L       L                         =
//                        T      EEE      L       L                         =
//                        T      E        L       L                         =
//                        T      EEEEE    LLLLL   LLLLL                     =
//                                                                          =
//   This file is a part of Toped project                                   =
//   Copyright (C) 2001-2012 Toped developers                               =
// ------------------------------------------------------------------------ =
//           $URL:$
//     Originator: Armin Taschwer - analogcmos@gmx.net
//---------------------------------------------------------------------------
//  Revision info
//---------------------------------------------------------------------------
//      $Revision:$
//          $Date:$
//        $Author:$
//===========================================================================

/**   Description:
 *
 * defines some DRC-Rules suited for the MOSIS SCMOS Process
 * 
 **/

/** LICENSE:
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 **/


//grid definitions
const real GRID = 0.005;

//EPS is essential for the function floor
//otherwise small rounding errors would give inaccurate results
//floor() with EPS is still far away to be a round()
const real EPS = GRID/1000.0; 

/*
 * ############################################
 * all following rules are using Lambda as a scale factor
 * if you want to use your own defined Lambda just specificy it 
 * somewhere in your start-scripts before you include the 
 * technology file
 */
 
#ifndef __LAMBDA
#define __LAMBDA 0.25
#endif

/* helper function to perform a list multiplication (== map)
 *  since the techfile is one of the first files to be included 
 *  we are not able to use UDF at all
 */
real list list_mult (real list in, real factor) {
    real list out;
    foreach (real i; in) {
	out[:+] = i * factor;
    }
    return (out);
}


//source: http://www.mosis.com/Technical/Designrules/scmos/scmos-main.html

//technology parameter
//max values are corresponding to the MET_MIN_x, POLY_MIN_x, and VIA_XX lists
const int MAX_POLY = 2; //max. number of poly-layers
const int MAX_METAL = 6; //max. number of metal-layers
const int MAX_VIA = 5; //max. number of via-layers

//following mappings are essential for some user defined functions (UDF)
const lmap list LAYER_MET  = {{1,"MET1"},{2,"MET2"},{3,"MET3"},{4,"MET4"},{5,"MET5"},{6,"MET6"}};
const lmap list LAYER_VIA  = {{1,"VIA1"},{2,"VIA2"},{3,"VIA3"},{4,"VIA4"},{5,"VIA5"}};
const lmap list LAYER_POLY = {{1,"POLY"},{2,"POLY2"}};

//DRC definitions for a VIAs
const real list VIA_SZ  =  list_mult ({2,2,2,2,3}, __LAMBDA); //via size (n x n) for VIA1 to VIA5
const real list VIA_SPC =  list_mult ({3,3,3,3,4}, __LAMBDA); //via space for VIA1 to VIA5
const real list VIA_ENC =  list_mult ({1,1,1,1,1}, __LAMBDA); //via enclosure == overlap for VIA1 to VIA5

//DRC definitions for metals
const real list MET_MIN_W = list_mult ({3,3,6,6,4,5}, __LAMBDA); //minimum metal width
const real list MET_MIN_S = list_mult ({2,3,4,6,4,5}, __LAMBDA); //minimum metal to metal space

//DRC definitions for poly
const real list POLY_MIN_W = list_mult ({2,3}, __LAMBDA); //minimum poly width
const real list POLY_MIN_S = list_mult ({2,3}, __LAMBDA); //minimum poly to poly space



#endif
