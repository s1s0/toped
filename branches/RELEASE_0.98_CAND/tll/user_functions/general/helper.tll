#ifndef __GENERAL_HELPER_TLL__
#define __GENERAL_HELPER_TLL__

//===========================================================================
//                                                                          =
// ------------------------------------------------------------------------ =
//                      TTTTT    EEEE     L       L                         =
//                      T T T    E        L       L                         =
//                        T      EEE      L       L                         =
//                        T      E        L       L                         =
//                        T      EEEEE    LLLLL   LLLLL                     =
//                                                                          =
//   This file is a part of Toped project                                   =
//   Copyright (C) 2001-2010 Toped developers                               =
// ------------------------------------------------------------------------ =
//           $URL$
//     Originator: Armin Taschwer - analogcmos@gmx.net
//---------------------------------------------------------------------------
//  Revision info
//---------------------------------------------------------------------------
//      $Revision$
//          $Date$
//        $Author$
//===========================================================================
/**   Description:
 *
 * section with helper functions commonly used in TELL-functions
 *
 * Version Info
 * ------------
 * compatible with Revision > 1899
 * 
 * 
 * Functions
 * ---------
 * int list seq (int a, int b) .. generates a sequence between a and b
 * real list seq (real a, real b, int nb)
 * real max (real a, real b) .. returns the maximum of two variables
 *                              (int is supported!)
 * real min (real a, real b) .. returns the minimum of two variables
 * real list_max (real list l) .. returns the maximum of a list
 * int  list_max (int list l)
 * real list_min (real list l) .. returns the minimum of a list
 * int  list_min (int list)
 * string llmap_key (lmap list l, int k) .. returns the value to the corresponding key of an lmap
 * string edge_to_str (edge a) .. returns a formated string
 *                                representing an edge (defined in
 *                                definitions.tll)
 * string point_to_str (point a);

 * point list get_points_from_layout ( layout obj )  .. returns list of points for an object
 *
 **/

/** LICENSE:
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */


#include "general/definitions.tll"



/* provides a sequence of integers
 * --> the TELL possibility to use "quick-lists" should be prefered
 * issue 110 fixed: preallocation now available --> speed improvment
 * @param a starting point of the sequentiel list
 * @param b end point of the seq. list
 * @return sequence of integer numbers between a and b
 */
int list seq (int a, int b) {
  int max = abs(a-b) + 1; 
  int list out [max]; //preallocation
  int i = 0;
    
  while ( i < max) {
	if (a <= b) {
	  out[i] = a+i;
	} else {
	  out[i] = a-i;
	}
	i = i+1;
  }
  return out;
}


//-------------------------------------------------
//  Function: seq
//  Description: 
//  defines a sequence of real numbers. The length of the sequence is
//  defined by nb
//-------------------------------------------------
//  @param a  starting number
//  @param b  end number
//  @param nb number of members in the list
//  @return 
//-------------------------------------------------
real list seq ( real a, real b, int nb )  {
  real list out[nb];
  real delta = (b-a) / (nb - 1);
   
  foreach (int i; seq(0,nb-1)) {
    out[i] = a + i*delta;
  }
  return (out);
}


/**
 * returns the maximum between two real variables
 * works in general also with integer numbers
 * @param a first number
 * @param b second number
 * @return maximum of a and b
 */
real max (real a, real b) {
  real m = a;
  if (a < b) m = b;
  return (m);
}


/**
 * returns the minimum between two real variables
 * works in general also with integer numbers
 * @param a first number
 * @param b second number
 * @return minimum of a and b
 */
real min (real a, real b) {
  real m = a;
  if (a > b) m = b;
  return (m);
}

/**
 * returns the maximum of a list
 * @param l list of real numbers
 * @return maximum of l
 */
real list_max (real list l) {
  real m;
  //check if list contains at least one element 
  if (length(l) > 0) m = l[0];
  else return (REAL_mINF); //better than nothing //other solutions?

  foreach(real i; l) {
    if (i > m) m = i;
  }
  return (m);
}

int list_max (int list l) {
  int m;
  if (length(l) > 0) m = l[0];
  else return (INT_mINF);
  foreach(int i; l) {
    if (i > m) m = i;
  }
  return (m);
}
  

/**
 * returns the minimum of a list
 * @param l list of real numbers
 * @return maximum of l
 */
real list_min (real list l) {
  real m;
  //check if list contains at least one element 
  if (length(l) > 0) m = l[0];
  else return (REAL_pINF); //better than nothing //other solutions?

  foreach(real i; l) {
    if (i < m) m = i;
  }
  return (m);
}


int list_min (int list l) {
  int m;
  if (length(l) > 0) m = l[0];
  else return (INT_pINF);
  foreach(int i; l) {
    if (i < m) m = i;
  }
  return (m);
}


//-------------------------------------------------
//  Function: llmap_key
//  Description:
//    LLmap is a list of lmap elements => a key - value pair
//    This functions looks for a specific key 
//-------------------------------------------------
//  @param l list of lmap elements
//  @param k searching for key k
//  @return string value of the value pair or STR_NOT_FOUND if not found
//          STR_NOT_FOUND is defined in definitions.tll
//-------------------------------------------------
string llmap_key ( lmap list l, int k )  {
  string ret = STR_NOT_FOUND; //defined in definitions.tll
  bool found = false;
  int len = length (l);
  int c = 0;
  lmap i;

  //"foreach" would be simpler but there is no goto, break or jump command
  while ( !found && c < len ) {
    i = l[c];
    if ( i.key == k ) {
      ret = i.value;
      found = true;
    }
    c = c + 1;
  }

  return (ret);
}

//-------------------------------------------------
//  Function: point_to_str
//  Description: 
//  returns a formated string containing the point information
//-------------------------------------------------
//  @param a point to print
//  @return a formated string
//-------------------------------------------------
string point_to_str ( point a )  {
  string ret = sprintf ("[%g, %g]", a.x, a.y);
  return (ret);
}

string edge_to_str (edge a) {
  string ret = sprintf ("{ %s <-> %s }", 
			point_to_str(a.a), point_to_str(a.b));
  return (ret);
}



//-------------------------------------------------
//  Function: get_points_from_layout
//  Description: 
//    recover the points from an layout object
//    !! attention !! for now it is up to the user to determine 
//                    which type the object has (box, poly, wire, etc.)
//-------------------------------------------------
//  @param obj layout object 
//  @return list of points
//-------------------------------------------------
point list get_points_from_layout ( layout obj )  {
  point list ret;

  foreach(point cp; pointdump(obj)) {
    ret[:+] = cp;
  }
  return (ret);
}




#endif
