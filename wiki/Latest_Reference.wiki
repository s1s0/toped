#summary Most actual reference to functions and options in the development branch

= Introduction =

Most actual reference for functions and options in the development branch of Toped

= Details =

== Command line options ==

Usage: `toped {options}* [tll-file]`

*Command line options:*

{{{
  -ogl_thread: 
  -ogl_safe  : 
  -nolog     : logging will be suppressed //rev1917
  -nogui     : GUI will not be started. Useful for TLL parsing
  -I<path>   : includes additional search paths for TLL files 
               (multiple entries allowed)
  -D<macro>  : equivalent to #define <macro> (multiple entries allowed)
  -help      : This help message
}}}

== Environment variables ==

Also described in in http://www.toped.org.uk/trm_intro.html

{{{
  TPD_LOCAL .. user specific path, mainly used to store log files
  TPD_GLOBAL .. global path to a proper toped installation to find fonts, etc. 
  TLL_INCLUDE_PATH .. list of several paths (seperated by :) for describing 
                      the location of UDFs (equivalent to -I in the command line)
}}}

if not set the default path will always be the current path.

== Preprocessing commands ==

*Pragmas*

{{{
  #pragma once   //rev1911: calls the *.tll file only once in actual toped session
  #pragma prereset //rev1911: 
  #pragma fullreset //rev1920: deletes any function or variable definitions. TELL stack is "clean" 
}}}

*Definitions*

{{{
  #define <var> <value>
  #define <macro> <code>
}}}

*Statements*

{{{
  #ifdef | #ifndef 
  [#else]
  #endif
}}}

== Tell-language ==

=== Lists ===

  * Speed issues: issue 110, r1907
  
preallocation of lists allows a significant improvement in terms of 
execution speed when an application uses dynamic growing/shrinking lists


=== Callbacks ===

fully introduced in rev1939 (fixes issue 105).
fixes in rev1947

see also tll/callbackTest.tll

2 types of the usage of callback functions

{{{
//anonymous
void funcArguFuncB(int a, int b, callback int (int,int) unifunc)
{
   int result = unifunc(a,b);
   string buffer = sprintf ("%d fparam %d is %d", a, b, result);
   printf ("[%s] \n",buffer);
}

funcArguFuncB(2,3,&simpleAdd);
funcArguFuncB(2,3,&simpleSub);
}}}

{{{
// predefined
/* The callback type definition follows the function definition syntax
 * with two differencies:
 * - "callback" keyword marks the start of the definition
 * - the argument list is anonymous i.e. just a list of argument types
   callback <return_type> <functypename> ([<argument> [, <argument> [...]]])
*/
// define a callback type unifunctype ...
callback int unifunctype(int,int);

void funcArguFuncA(int a, int b, unifunctype unifunc)
{
   int result = unifunc(a,b);
   string buffer = sprintf ("%d fparam %d is %d", a, b, result);
   printf ("[%s] \n",buffer);
}

funcArguFuncA(2,3,@simpleAdd);
funcArguFuncA(2,3,@simpleSub);
}}}

To handle callback functions like variables you may use following definitions
{{{
// or define directly a variable unifunc of anonymous callback type
callback int (int,int) unifuncB = @simpleAdd;

// ... and a variable unifunc of that type
unifunctype unifuncA = @simpleAdd;
}}}



== Tell-functions ==

=== Deprecated ===

  * echo();  ... since rev1900 to rev1094 (issue103); use printf() instead

=== Setting Parametes ===

refer to tpd_bidfunc/tpdf_props.cpp in
function tellstdfunc::analyzeTopedParameters

{{{
 setparams({"ADJUST_TEXT_ORIENTATION", "0"});
 setparams({"SELECT_TEXT_FONT", "0"});
 setparams({"CELL_VIEW_DEPTH", "0"});
 setparams({"CELL_DEPTH_ALPHA_EBB", "0"});
 setparams({"MIN_VISUAL_AREA", "0"});
 setparams({"GRC_BLINK_PERIOD", "0"});
 setparams({"HIGHLIGHT_ON_HOVER", "0"});
 setparams({"UNDO_DEPTH", "0"}); 
}}}

 
 